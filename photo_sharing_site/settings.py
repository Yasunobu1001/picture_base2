"""
Django settings for photo_sharing_site project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-sxk-i0*557_hbq11=xv^#3mu=x*k8%%pod)n=ey5m-)6&&jzo8')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Allow hosts from env, fallback to local dev defaults
ALLOWED_HOSTS = [h.strip() for h in config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',') if h.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local apps
    'accounts',
    'photos',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'photos.middleware.SecurityHeadersMiddleware',  # セキュリティヘッダー
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'photos.middleware.XSSProtectionMiddleware',  # XSS保護
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'photos.middleware.SessionSecurityMiddleware',  # セッションセキュリティ
    'photos.middleware.LoginAttemptMiddleware',  # ログイン試行制限
    'photos.middleware.FileUploadSecurityMiddleware',  # ファイルアップロードセキュリティ
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'photo_sharing_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'photo_sharing_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Render用のDATABASE_URL対応
import dj_database_url

DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    # Renderなどの環境でDATABASE_URLが提供される場合
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # ローカル開発環境用
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DATABASE_NAME', default='photo_sharing_db'),
            'USER': config('DATABASE_USER', default='postgres'),
            'PASSWORD': config('DATABASE_PASSWORD', default=''),
            'HOST': config('DATABASE_HOST', default='localhost'),
            'PORT': config('DATABASE_PORT', default='5432'),
            'CONN_MAX_AGE': 600,  # 接続プールの最大生存時間（秒）
            'CONN_HEALTH_CHECKS': True,  # 接続ヘルスチェック
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Security Settings
# CSRF Protection
CSRF_COOKIE_SECURE = not DEBUG  # HTTPSでのみCSRFクッキーを送信（本番環境）
CSRF_COOKIE_HTTPONLY = True  # JavaScriptからCSRFクッキーにアクセス不可
CSRF_COOKIE_SAMESITE = 'Strict'  # SameSite属性を設定
CSRF_USE_SESSIONS = False  # CSRFトークンをセッションではなくクッキーに保存
CSRF_COOKIE_AGE = 31449600  # CSRFクッキーの有効期限（1年）

# Session Security
SESSION_COOKIE_SECURE = not DEBUG  # HTTPSでのみセッションクッキーを送信（本番環境）
SESSION_COOKIE_HTTPONLY = True  # JavaScriptからセッションクッキーにアクセス不可
SESSION_COOKIE_SAMESITE = 'Strict'  # SameSite属性を設定
SESSION_COOKIE_AGE = 1209600  # セッションの有効期限（2週間）
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # ブラウザを閉じてもセッションを保持
SESSION_SAVE_EVERY_REQUEST = True  # リクエストごとにセッションを保存

# Security Headers
SECURE_BROWSER_XSS_FILTER = True  # XSS攻撃を防ぐブラウザフィルタを有効化
SECURE_CONTENT_TYPE_NOSNIFF = True  # MIMEタイプスニッフィングを無効化
X_FRAME_OPTIONS = 'DENY'  # フレーム内での表示を拒否（クリックジャッキング対策）
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'  # リファラーポリシー

# HTTPS Settings (本番環境用)
if not DEBUG:
    SECURE_SSL_REDIRECT = True  # HTTPからHTTPSへのリダイレクト
    SECURE_HSTS_SECONDS = 31536000  # HSTS（HTTP Strict Transport Security）
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # サブドメインにもHSTSを適用
    SECURE_HSTS_PRELOAD = True  # HSTSプリロードリストに登録可能

# File Upload Security
FILE_UPLOAD_PERMISSIONS = 0o644  # アップロードファイルの権限
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755  # アップロードディレクトリの権限

# Password Security
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # 最も安全
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Login Security
LOGIN_ATTEMPTS_LIMIT = 5  # ログイン試行回数制限（カスタム実装用）
LOGIN_ATTEMPTS_TIMEOUT = 300  # ログイン試行制限のタイムアウト（5分）

# Content Security Policy (将来の拡張用)
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
# CSP_IMG_SRC = ("'self'", "data:", "https:")
# CSP_FONT_SRC = ("'self'",)
# CSP_CONNECT_SRC = ("'self'",)
# CSP_FRAME_ANCESTORS = ("'none'",)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# Login/Logout URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
